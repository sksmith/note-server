name: Deploy Production

on:
  release:
    types: [published]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: note-server
  ECS_SERVICE: NoteServer
  ECS_CLUSTER: Production
  ECS_TASK_DEFINITION: .aws/task-def-note-server-prod.json
  CONTAINER_NAME: note-server

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # TODO Use this repositories preferred method of auth
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: '${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      
      - name: Notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          username: Prod Deployment
          description: A deployment to the production environment has been attempted
          webhook: ${{ secrets.DISCORD_WEBHOOK }}